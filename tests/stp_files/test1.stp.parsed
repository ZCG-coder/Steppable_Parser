'assignment' : "mat1 = [
1 3 4 5 8 9;
4 5 6 8 9 0;
4 2 2 1 2 1;
3 2 4 1 2 4;
3 2 4 1 2 4
]"
    'identifier' : "mat1"
    'matrix' : "[
1 3 4 5 8 9;
4 5 6 8 9 0;
4 2 2 1 2 1;
3 2 4 1 2 4;
3 2 4 1 2 4
]"
        'matrix_row' : "1 3 4 5 8 9;"
            'number' : "1"
            'number' : " 3"
            'number' : " 4"
            'number' : " 5"
            'number' : " 8"
            'number' : " 9"
        'matrix_row' : "4 5 6 8 9 0;"
            'number' : "4"
            'number' : " 5"
            'number' : " 6"
            'number' : " 8"
            'number' : " 9"
            'number' : " 0"
        'matrix_row' : "4 2 2 1 2 1;"
            'number' : "4"
            'number' : " 2"
            'number' : " 2"
            'number' : " 1"
            'number' : " 2"
            'number' : " 1"
        'matrix_row' : "3 2 4 1 2 4;"
            'number' : "3"
            'number' : " 2"
            'number' : " 4"
            'number' : " 1"
            'number' : " 2"
            'number' : " 4"
        'matrix_row' : "3 2 4 1 2 4"
            'number' : "3"
            'number' : " 2"
            'number' : " 4"
            'number' : " 1"
            'number' : " 2"
            'number' : " 4"
'assignment' : "mat2 = [
1*2^3 3 4 5 8 9 ;
4 5 6 8 9 0 ;
4 2 2 1 2 1 ;
3 2 4 1 2 4 ;
3 2 4 1 2 4 ;]"
    'identifier' : "mat2"
    'matrix' : "[
1*2^3 3 4 5 8 9 ;
4 5 6 8 9 0 ;
4 2 2 1 2 1 ;
3 2 4 1 2 4 ;
3 2 4 1 2 4 ;]"
        'matrix_row' : "1*2^3 3 4 5 8 9 ;"
            'binary_expression' : "1*2^3"
                'binary_expression' : "1*2"
                    'number' : "1"
                    'binary_operator' : "*"
                        '*' : "*"
                    'number' : "2"
                'binary_operator' : "^"
                    '^' : "^"
                'number' : "3"
            'number' : " 3"
            'number' : " 4"
            'number' : " 5"
            'number' : " 8"
            'number' : " 9"
        'matrix_row' : "4 5 6 8 9 0 ;"
            'number' : "4"
            'number' : " 5"
            'number' : " 6"
            'number' : " 8"
            'number' : " 9"
            'number' : " 0"
        'matrix_row' : "4 2 2 1 2 1 ;"
            'number' : "4"
            'number' : " 2"
            'number' : " 2"
            'number' : " 1"
            'number' : " 2"
            'number' : " 1"
        'matrix_row' : "3 2 4 1 2 4 ;"
            'number' : "3"
            'number' : " 2"
            'number' : " 4"
            'number' : " 1"
            'number' : " 2"
            'number' : " 4"
        'matrix_row' : "3 2 4 1 2 4 ;"
            'number' : "3"
            'number' : " 2"
            'number' : " 4"
            'number' : " 1"
            'number' : " 2"
            'number' : " 4"
'object_definition' : "obj1 {
    mat = [ 1 2 3 4 5 ]
}"
    'object_name' : "obj1"
    'assignment' : "mat = [ 1 2 3 4 5 ]"
        'identifier' : "mat"
        'matrix' : "[ 1 2 3 4 5 ]"
            'matrix_row' : "1 2 3 4 5"
                'number' : "1"
                'number' : " 2"
                'number' : " 3"
                'number' : " 4"
                'number' : " 5"
'function_definition' : "fn1 Mat m, Mat n -> Mat {
    m * (n + 3)
}"
    'function_name' : "fn1"
    'parameter_list' : " Mat m, Mat n"
        'type' : " Mat"
        'param_name' : "m"
        'type' : "Mat"
        'param_name' : "n"
    'type' : "Mat"
    'binary_expression' : "m * (n + 3)"
        'identifier' : "m"
        'binary_operator' : " *"
            '*' : " *"
        'bracketed_expr' : "(n + 3)"
            'binary_expression' : "n + 3"
                'identifier' : "n"
                'binary_operator' : " +"
                    '+' : " +"
                'number' : "3"
'assignment' : "var1 = (3 mod (2+4) + 5) + 2"
    'identifier' : "var1"
    'binary_expression' : "(3 mod (2+4) + 5) + 2"
        'bracketed_expr' : "(3 mod (2+4) + 5)"
            'binary_expression' : "3 mod (2+4) + 5"
                'modulus_binary_expr' : "3 mod (2+4)"
                    'number' : "3"
                    ' mod ' : " mod "
                    'bracketed_expr' : "(2+4)"
                        'binary_expression' : "2+4"
                            'number' : "2"
                            'binary_operator' : "+"
                                '+' : "+"
                            'number' : "4"
                'binary_operator' : " +"
                    '+' : " +"
                'number' : "5"
        'binary_operator' : " +"
            '+' : " +"
        'number' : "2"
'if_else_stmt' : "if type(var1) == "number" {
    "Great! \{var1\} is a number. \r \n"
} else {
    "Totally wrong!"
}"
    'if' : "if"
    'binary_expression' : "type(var1) == "number""
        'function_call' : "type(var1)"
            'identifier_or_member_access' : "type"
                'identifier' : "type"
            'identifier' : "var1"
        'binary_operator' : " =="
            '==' : " =="
        'string' : ""number""
            'string_content' : "number"
    'expression_statement' : ""Great! \{var1\} is a number. \r \n""
        'string' : ""Great! \{var1\} is a number. \r \n""
            'string_content' : "Great! "
            'formatting_snippet' : "\{var1\}"
                'identifier' : "var1"
            'string_content' : " is a number. "
            'escape_sequence' : "\r"
            'string_content' : " "
            'escape_sequence' : "\n"
    'else' : "else"
    'expression_statement' : ""Totally wrong!""
        'string' : ""Totally wrong!""
            'string_content' : "Totally wrong!"
'assignment' : "obj.mat = mat1;"
    'member_access' : "obj.mat"
        'identifier' : "obj"
        'identifier' : "mat"
    'identifier' : "mat1"
'assignment' : "a = sin(15)"
    'identifier' : "a"
    'function_call' : "sin(15)"
        'identifier_or_member_access' : "sin"
            'identifier' : "sin"
        'number' : "15"
'foreach_in_stmt' : "foreach x in mat1 {
    x = x ^ 2
}"
    'foreach' : "foreach"
    'loop_var' : "x"
    'in' : " in"
    'identifier_or_member_access' : "mat1"
        'identifier' : "mat1"
    'loop_statements' : "x = x ^ 2"
        'assignment' : "x = x ^ 2"
            'identifier' : "x"
            'binary_expression' : "x ^ 2"
                'identifier' : "x"
                'binary_operator' : " ^"
                    '^' : " ^"
                'number' : "2"
'expression_statement' : "mat1 * mat2"
    'binary_expression' : "mat1 * mat2"
        'identifier' : "mat1"
        'binary_operator' : " *"
            '*' : " *"
        'identifier' : "mat2"
'expression_statement' : "mat1 .* mat2"
    'binary_expression' : "mat1 .* mat2"
        'identifier' : "mat1"
        'binary_operator' : " .*"
            '.*' : " .*"
        'identifier' : "mat2"
'expression_statement' : "sum(mat1)"
    'function_call' : "sum(mat1)"
        'identifier_or_member_access' : "sum"
            'identifier' : "sum"
        'identifier' : "mat1"
'assignment' : "mat1 = mat1 * mat2"
    'identifier' : "mat1"
    'binary_expression' : "mat1 * mat2"
        'identifier' : "mat1"
        'binary_operator' : " *"
            '*' : " *"
        'identifier' : "mat2"
'import_statement' : "import module"
    'import' : "import"
    'identifier' : "module"
'assignment' : "stat = module.learn()"
    'identifier' : "stat"
    'function_call' : "module.learn()"
        'identifier_or_member_access' : "module.learn"
            'member_access' : "module.learn"
                'identifier' : "module"
                'identifier' : "learn"
'expression_statement' : "stat"
    'identifier' : "stat"
'expression_statement' : "12% + 11% * (1+2)"
    'binary_expression' : "12% + 11% * (1+2)"
        'binary_expression' : "12% + 11%"
            'percentage' : "12%"
                'number' : "12"
                '%' : "%"
            'binary_operator' : " +"
                '+' : " +"
            'percentage' : "11%"
                'number' : "11"
                '%' : "%"
        'binary_operator' : " *"
            '*' : " *"
        'bracketed_expr' : "(1+2)"
            'binary_expression' : "1+2"
                'number' : "1"
                'binary_operator' : "+"
                    '+' : "+"
                'number' : "2"
'assignment' : "x = symbol("x")"
    'identifier' : "x"
    'function_call' : "symbol("x")"
        'identifier_or_member_access' : "symbol"
            'identifier' : "symbol"
        'string' : ""x""
            'string_content' : "x"
'assignment' : "expr = x^2 == 4"
    'identifier' : "expr"
    'binary_expression' : "x^2 == 4"
        'binary_expression' : "x^2"
            'identifier' : "x"
            'binary_operator' : "^"
                '^' : "^"
            'number' : "2"
        'binary_operator' : " =="
            '==' : " =="
        'number' : "4"
'assignment' : "vals = solve(expr)"
    'identifier' : "vals"
    'function_call' : "solve(expr)"
        'identifier_or_member_access' : "solve"
            'identifier' : "solve"
        'identifier' : "expr"
'expression_statement' : ""Unicode \xFE\xFF \033[1f;""
    'string' : ""Unicode \xFE\xFF \033[1f;""
        'string_content' : "Unicode "
        'unicode_escape' : "\xFE"
            '\x' : "\x"
            'hex_digits' : "FE"
        'unicode_escape' : "\xFF"
            '\x' : "\x"
            'hex_digits' : "FF"
        'string_content' : " "
        'octal_escape' : "\033"
        'string_content' : "[1f;"
